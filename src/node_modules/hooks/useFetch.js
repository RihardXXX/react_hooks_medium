import { useState, useEffect, useCallback } from "react";
import useLocalstorage from 'hooks/useLocalstorage';

import axios from "axios";

const useFetch = (url) => {
    const baseUrl = 'http://localhost:3000/api';

    const [response, setResponse] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [errors, setErrors] = useState(null);
    const [options, setOptions] = useState({});
    const [token, setToken] = useLocalstorage('token');

    const doFetch = useCallback((options = {}) => {
        setOptions(options);
        setIsLoading(true);
    }, []);

    useEffect(() => {

        const requestOptions = {
            ...options,
            ...{
                headers: {
                    authorization: token ? `Token ${token}` : ''
                }
            }
        }

        if(!isLoading) {
            return;
        }
        axios(baseUrl + url, requestOptions)
            .then(response => {
                // console.log('response: ', response);
                setIsLoading(false);
                setResponse(response);
            })
            .catch(error => {
                // console.log('error: ', error.response.data);
                setIsLoading(false);
                setErrors(error.response.data);
            })
    }, [isLoading, url, options]);

    return [ { response, isLoading, errors }, doFetch ];
}

export default useFetch;
